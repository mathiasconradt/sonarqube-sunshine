name: 'SonarQube Sunshine Report'
description: 'Generate interactive security reports from SonarQube or SBOM files'
author: 'mathiasconradt'

inputs:
  sonar-token:
    description: 'SonarQube authentication token'
    required: false
  sonar-host-url:
    description: 'SonarQube host URL'
    required: false
  component-key:
    description: 'SonarQube component key'
    required: false
  branch:
    description: 'Branch name for SonarQube reports'
    required: false
  input-file:
    description: 'Path to CycloneDX input file'
    required: false
  output-file:
    description: 'Output HTML file name'
    required: false
    default: 'report.html'
  enrich-cves:
    description: 'Enrich CVEs with EPSS and CISA KEV data'
    required: false
    default: 'true'
  deploy-to-pages:
    description: 'Deploy report to GitHub Pages'
    required: false
    default: 'true'
  pages-url:
    description: 'Custom Pages URL (auto-detected if not provided)'
    required: false

outputs:
  report-path:
    description: 'Path to the generated HTML report'
    value: ${{ inputs.output-file }}
  pages-url:
    description: 'URL where the report is published'
    value: ${{ steps.get-pages-url.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Debug - Check current directory
      shell: bash
      run: |
        echo "=== DEBUG START ==="
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "=== DEBUG END ==="

    - name: Download SonarQube Sunshine script and dependencies
      shell: bash
      run: |
        echo "📥 Starting downloads..."
        
        echo "📥 Downloading SonarQube Sunshine script..."
        if curl -sL -f https://raw.githubusercontent.com/mathiasconradt/sonarqube-sunshine/main/sonarqube-sunshine.py -o sonarqube-sunshine.py; then
          echo "✅ Script downloaded successfully"
        else
          echo "❌ Failed to download script"
          exit 1
        fi
        
        echo "📥 Downloading requirements.txt..."
        if curl -sL -f https://raw.githubusercontent.com/mathiasconradt/sonarqube-sunshine/main/requirements.txt -o requirements.txt; then
          echo "✅ Requirements.txt downloaded successfully"
        else
          echo "❌ Failed to download requirements.txt"
          exit 1
        fi
        
        echo "🔍 Verifying downloads..."
        ls -la sonarqube-sunshine.py requirements.txt
        
        echo "📄 Requirements.txt contents:"
        cat requirements.txt
        
        echo "✅ All files downloaded successfully"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        
        # Check if requirements.txt exists and is not empty
        if [ -f "requirements.txt" ] && [ -s "requirements.txt" ]; then
          echo "📦 Installing from requirements.txt..."
          pip install -r requirements.txt
        else
          echo "⚠️ requirements.txt not found or empty, installing default dependencies..."
          pip install requests
        fi
        
        echo "✅ Dependencies installed successfully"

    - name: Generate Report
      shell: bash
      run: |
        echo "🔧 Configuring SonarQube Sunshine..."
        
        # Build command based on inputs
        CMD="python sonarqube-sunshine.py -o ${{ inputs.output-file }}"
        
        # Add enrichment flag
        if [ "${{ inputs.enrich-cves }}" = "true" ]; then
          CMD="$CMD -e"
        fi
        
        # Debug: Show what inputs we received
        echo "🔍 Debugging inputs:"
        echo "  sonar-token: $(if [ -n '${{ inputs.sonar-token }}' ]; then echo 'PROVIDED'; else echo 'EMPTY'; fi)"
        echo "  sonar-host-url: ${{ inputs.sonar-host-url }}"
        echo "  component-key: ${{ inputs.component-key }}"
        echo "  branch: ${{ inputs.branch }}"
        
        # Check if SonarQube integration should be used (only check inputs, not env vars)
        if [ -n "${{ inputs.sonar-token }}" ]; then
          echo "🌐 Using SonarQube integration..."
          
          # Add SonarQube parameters from inputs
          CMD="$CMD -t ${{ inputs.sonar-token }}"
          
          if [ -n "${{ inputs.sonar-host-url }}" ]; then
            CMD="$CMD -u ${{ inputs.sonar-host-url }}"
          fi
          
          if [ -n "${{ inputs.component-key }}" ]; then
            CMD="$CMD -c ${{ inputs.component-key }}"
          fi
          
          if [ -n "${{ inputs.branch }}" ]; then
            CMD="$CMD -b ${{ inputs.branch }}"
          else
            CMD="$CMD -b ${{ github.ref_name }}"
          fi
          
        elif [ -n "${{ inputs.input-file }}" ]; then
          echo "📁 Using file input mode..."
          CMD="$CMD -i ${{ inputs.input-file }}"
          
        else
          echo "🔍 Auto-detecting SBOM files..."
          if [ -f "sbom.json" ]; then
            CMD="$CMD -i sbom.json"
          elif [ -f "bom.json" ]; then
            CMD="$CMD -i bom.json"
          elif [ -f "cyclone-dx.json" ]; then
            CMD="$CMD -i cyclone-dx.json"
          elif [ -f "sbom.cdx.json" ]; then
            CMD="$CMD -i sbom.cdx.json"
          else
            echo "❌ No SBOM file found and no SonarQube configuration provided"
            exit 1
          fi
        fi
        
        echo "🚀 Running: $CMD"
        eval $CMD

    - name: Get Pages URL
      id: get-pages-url
      shell: bash
      run: |
        if [ -n "${{ inputs.pages-url }}" ]; then
          echo "url=${{ inputs.pages-url }}" >> $GITHUB_OUTPUT
        else
          # Auto-detect Pages URL
          echo "url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ inputs.output-file }}" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Clean Deployment Directory
      if: inputs.deploy-to-pages == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      shell: bash
      run: |
        echo "🧹 Creating clean deployment directory..."
        mkdir -p deploy-clean/reports
        
        # Copy only the HTML report file
        cp "${{ inputs.output-file }}" deploy-clean/reports/
        
        echo "📁 Deployment directory contents:"
        find deploy-clean -type f -name "*.html"
        
        echo "✅ Clean deployment directory prepared"

    - name: Deploy to GitHub Pages
      if: inputs.deploy-to-pages == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ github.token }}
        publish_dir: deploy-clean
        keep_files: false
        publish_branch: gh-pages
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy SonarQube Sunshine Report'

    - name: Display Results
      shell: bash
      run: |
        echo "========================================"
        echo "🎉 SONARQUBE SUNSHINE REPORT READY!"
        echo "========================================"
        echo ""
        echo "📊 Report generated: ${{ inputs.output-file }}"
        if [ "${{ inputs.deploy-to-pages }}" = "true" ] && [ "${{ github.ref }}" = "refs/heads/main" -o "${{ github.ref }}" = "refs/heads/master" ]; then
          echo "🌐 Live URL: ${{ steps.get-pages-url.outputs.url }}"
        fi
        echo ""
        echo "========================================"

    - name: Add Report URL to Job Summary
      if: inputs.deploy-to-pages == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      shell: bash
      run: |
        PAGES_URL="${{ steps.get-pages-url.outputs.url }}"
        
        echo "# 🎉 SonarQube Sunshine Report Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🌐 **[🚀 VIEW REPORT ONLINE 🚀]($PAGES_URL)**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Report Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **📊 Report URL:** $PAGES_URL" >> $GITHUB_STEP_SUMMARY
        echo "- **📅 Generated:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **📁 Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **🌿 Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **🔄 Auto-updates:** Every push to main/master" >> $GITHUB_STEP_SUMMARY
        echo "- **📱 Mobile-friendly:** Yes" >> $GITHUB_STEP_SUMMARY
        echo "- **🔗 Shareable:** Yes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✨ Report Features:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Interactive vulnerability charts" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Component dependency visualization" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ Security risk assessment with EPSS scores" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Detailed vulnerability tables" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 CISA KEV integration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 💾 Alternative Access:" >> $GITHUB_STEP_SUMMARY
        echo "If you need the raw HTML file, download the artifact from the workflow run above." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Powered by [SonarQube Sunshine](https://github.com/mathiasconradt/sonarqube-sunshine)**" >> $GITHUB_STEP_SUMMARY

    - name: Add Artifact-Only Summary
      if: inputs.deploy-to-pages != 'true' || (github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master')
      shell: bash
      run: |
        echo "# 📊 SonarQube Sunshine Report Generated!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Report Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **📅 Generated:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **📁 Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **🌿 Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **📄 Report file:** ${{ inputs.output-file }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 💾 Access:" >> $GITHUB_STEP_SUMMARY
        echo "Download the report artifact from this workflow run to view the security analysis." >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.deploy-to-pages }}" = "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📝 Note:** GitHub Pages deployment only occurs on main/master branches." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Powered by [SonarQube Sunshine](https://github.com/mathiasconradt/sonarqube-sunshine)**" >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'shield'
  color: 'blue'
