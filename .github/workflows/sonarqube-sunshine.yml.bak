name: SonarQube Sunshine Report

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      input_file:
        description: 'Path to CycloneDX input file (optional if using SonarQube)'
        required: false
        type: string
      sonar_host_url:
        description: 'SonarQube host URL (optional if set in secrets)'
        required: false
        type: string
      component_key:
        description: 'SonarQube component key (optional if set in secrets)'
        required: false
        type: string
      branch:
        description: 'Branch name for SonarQube reports'
        required: false
        type: string
      enrich_cves:
        description: 'Enrich CVEs with EPSS and CISA KEV data'
        required: false
        type: boolean
        default: false

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run SonarQube Sunshine (SonarQube Integration)
      if: ${{ env.SONAR_TOKEN != '' || github.event.inputs.sonar_host_url != '' }}
      run: |
        python sonarqube-sunshine.py \
          --output report.html \
          ${{ github.event.inputs.enrich_cves == 'true' && '--enrich' || '' }} \
          ${{ env.SONAR_TOKEN != '' && format('--sonar-token {0}', env.SONAR_TOKEN) || '' }} \
          ${{ github.event.inputs.sonar_host_url != '' && format('--sonar-host-url {0}', github.event.inputs.sonar_host_url) || env.SONAR_HOST_URL != '' && format('--sonar-host-url {0}', env.SONAR_HOST_URL) || '' }} \
          ${{ github.event.inputs.component_key != '' && format('--component-key {0}', github.event.inputs.component_key) || env.COMPONENT_KEY != '' && format('--component-key {0}', env.COMPONENT_KEY) || '' }} \
          ${{ github.event.inputs.branch != '' && format('--branch {0}', github.event.inputs.branch) || env.BRANCH != '' && format('--branch {0}', env.BRANCH) || format('--branch {0}', github.ref_name) }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        COMPONENT_KEY: ${{ secrets.COMPONENT_KEY }}
        BRANCH: ${{ secrets.BRANCH }}

    - name: Run SonarQube Sunshine (File Input Mode)
      if: ${{ env.SONAR_TOKEN == '' && github.event.inputs.sonar_host_url == '' && github.event.inputs.input_file != '' }}
      run: |
        python sonarqube-sunshine.py \
          --input ${{ github.event.inputs.input_file }} \
          --output report.html \
          ${{ github.event.inputs.enrich_cves == 'true' && '--enrich' || '' }}

    - name: Run SonarQube Sunshine (Default - look for SBOM files)
      if: ${{ env.SONAR_TOKEN == '' && github.event.inputs.sonar_host_url == '' && github.event.inputs.input_file == '' }}
      run: |
        # Look for common SBOM file patterns
        if [ -f "sbom.json" ]; then
          INPUT_FILE="sbom.json"
        elif [ -f "bom.json" ]; then
          INPUT_FILE="bom.json"
        elif [ -f "cyclone-dx.json" ]; then
          INPUT_FILE="cyclone-dx.json"
        elif [ -f "sbom.cdx.json" ]; then
          INPUT_FILE="sbom.cdx.json"
        else
          echo "No SBOM file found. Please provide input file or SonarQube configuration."
          exit 1
        fi
        
        python sonarqube-sunshine.py \
          --input "$INPUT_FILE" \
          --output report.html \
          ${{ github.event.inputs.enrich_cves == 'true' && '--enrich' || '' }}

    - name: Upload HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sonarqube-sunshine-report
        path: report.html
        retention-days: 30

    - name: Upload Report to Job Summary
      if: always() && hashFiles('report.html') != ''
      run: |
        echo "## ðŸ“Š SonarQube Sunshine Report Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The security and vulnerability report has been generated successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ Report Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **File size:** $(du -h report.html | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Generated on:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¥ Download Report" >> $GITHUB_STEP_SUMMARY
        echo "The report is available as a workflow artifact and will be retained for 30 days." >> $GITHUB_STEP_SUMMARY

    - name: Comment PR with Report Link (for PRs)
      if: github.event_name == 'pull_request' && hashFiles('report.html') != ''
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ“Š SonarQube Sunshine Report
            
            A security and vulnerability report has been generated for this PR!
            
            **ðŸ“¥ Download the report:**
            - Go to the [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - Download the \`sonarqube-sunshine-report\` artifact
            
            The report will be retained for 30 days.`
          })
